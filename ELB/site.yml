---
- name: Load Balanced AWS Web servers
  hosts: localhost
  connection: local
  become: yes
  remote_user: ubuntu
  gather_facts: False
  tasks:
    - name: Create security group
      ec2_group:
        name: "{{ project_name }}_security_group"
        description: "New security group"
        region: "{{ region }}"
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
        rules:
          - proto: tcp  # ssh
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp  # http
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp  # https
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: demo_firewall

    - name: create key pair using key_material obtained using file lookup plugin
      amazon.aws.ec2_key:
        name: "{{ project_name }}-{{ env }}-key"
        region: "{{ region }}"
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
        key_material: "{{ lookup('file', '/home/ubuntu/.ssh/id_rsa.pub') }}"
      register: ec2_key

    - name: Save private key
      copy: content="{{ ec2_key.key.private_key }}" dest="/home/ubuntu/.ssh/id_rsa" mode=0600
      when: ec2_key.changed

    - name: Create  EC2 instance(s)
      ec2:
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
        key_name: "{{ project_name }}-{{ env }}-key"
        region: "{{ region }}"
        group_id: "{{ demo_firewall.group_id }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami }}"
        wait: yes
        instance_tags:
            env: "{{ env }}"
            Name: GSK_Web_Server
            Owner: Gokul_Rajendran
            Purpose: GSK_Demo
            Department: CCS_DevOps
        count_tag: env
        exact_count: 2
        vpc_subnet_id: subnet-4be82722
        assign_public_ip: yes
      register: ec2


    - name: Add the newly created EC2 instance(s) to host group
      lineinfile:
        path: "{{ hostpath }}"
        #regexp={{ item.public_ip }}
        insertafter: '[WebServers]'
        line: "{{ item.public_ip }} {{hoststring}}"
        state: present
        #backup: yes
      with_items: "{{ ec2.instances }}"

    - name: wait for the servers to appear on the network
      wait_for: host={{ item.public_dns_name }} port=22 delay=10 timeout=180 state=started
      with_items: "{{ ec2.tagged_instances }}"

    - name: add server ip addresses to hosts group
      add_host: hostname={{ item.public_ip }} groupname=launched
      with_items: "{{ ec2.tagged_instances }}"

- name: webservers (installs nginx ...)
  hosts: launched
  remote_user: ubuntu
  become: true
  become_method: sudo
  gather_facts: True
  roles:
    - web

- name: spin up the load balancer and add the servers to it
  hosts: 127.0.0.1
  connection: local
  gather_facts: False
  tasks:
    - name: setup a simple load balancer
      ec2_elb_lb:
        name: aws-elb-demo
        state: present
        region: "{{ region }}"
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
        zones:
          - eu-west-2c
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
      register: aws_elb_demo

    - name: add the webservers to the load balancer
      local_action: ec2_elb
      args:
        instance_id: "{{ item.id }}"
        ec2_elbs: aws-elb-demo
        state: present
        region: "{{ region }}"
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
      with_items: "{{ ec2.tagged_instances }}"
- name: Add Users/Group
  hosts: launched
  remote_user: ubuntu
  become: true
  become_method: sudo
  gather_facts: True
  tasks:
    - name: Allow 'admin' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%admin'
        line: '%admin ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'


    - name: Add sudoers users to admin group
      user: name="{{item}}" groups=admin append=yes state=present createhome=yes
      with_items:
        - "{{ app_code_user_1 }}"
        - "{{ app_code_user_2 }}"

    - name: Set up authorized keys for the user-1
      authorized_key: user="{{app_code_user_1}}" key="{{item}}"
      with_file:
        - /home/ubuntu/.ssh/id_rsa.pub

    - name: Set up authorized keys for the user-2
      authorized_key: user="{{app_code_user_1}}" key="{{item}}"
      with_file:
        - /home/ubuntu/.ssh/id_rsa.pub      
